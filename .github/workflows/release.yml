name: Unified Release Workflow

on:
    push:
        tags:
            - 'v*.*.*'
        branches:
            - main
    pull_request:
        types: [closed]
        branches: [main] # Targeting main branch for closed PRs
    workflow_dispatch: {}

env:
    NODE_VERSION: '22.x'

jobs:
    update_release_draft:
        name: Update Release Draft
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        permissions:
            contents: write # Needed to read contents and draft the release
            pull-requests: write # Needed to interact with PRs for linking
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Draft release
              uses: release-drafter/release-drafter@v5
              with:
                  config-name: release-drafter-config.yml
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    update_release_notes:
        name: Update Release Notes
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
            - uses: tiangolo/latest-changes@0.3.2
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  latest_changes_file: ./release-notes.md
                  latest_changes_header: '## Latest Changes'
                  end_regex: '^## '
                  label_header_prefix: '### '

    build:
        name: Build for ${{ matrix.environment }}
        if: startsWith(github.ref, 'refs/tags/v')
        runs-on: ubuntu-latest
        permissions:
            contents: write
        strategy:
            matrix:
                include: # Use include for more complex matrix configurations
                    - environment: production
                      domain: admin.ownima.com
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Install Bun
              run: |
                  curl -fsSL https://bun.sh/install | bash
                  echo "$HOME/.bun/bin" >> $GITHUB_PATH

            - name: Install dependencies
              run: bun install --frozen-lockfile

            - name: Run lint # Running lint once is enough, consider moving to a separate job or run per env if lint rules differ
              if: matrix.environment == 'staging' # Example: run lint only for one environment or adjust
              run: bun lint # bun test

            - name: Build package for ${{ matrix.environment }}
              # The env vars APP_ENV and DOMAIN will be available to bun run build
              run: bun run build
              env:
                  VITE_DOMAIN: https://${{ matrix.domain }} # for back compat.
                  VITE_APP_ENV: ${{ matrix.environment }}
                  VITE_APP_DOMAIN: https://${{ matrix.domain }}
                  VITE_APP_VERSION: ${{ github.ref_name }}

            - name: Compress build output for ${{ matrix.environment }}
              run: |
                  ARTIFACT_NAME="build-${{ matrix.environment }}-${{ github.ref_name }}.tar.gz"
                  tar -czf $ARTIFACT_NAME dist
                  echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
                  rm -rf dist # Clean up dist for the next matrix run or if other steps follow

            - name: Upload compressed artifact for ${{ matrix.environment }}
              uses: actions/upload-artifact@v4
              with:
                  name: build-archive-${{ matrix.environment }}
                  path: ${{ env.ARTIFACT_NAME }}
    release:
        needs: [build] # This correctly waits for all matrix jobs in 'build' to complete
        name: Release
        if: startsWith(github.ref, 'refs/tags/v')
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Checkout code # Checkout is likely not needed if only using artifacts and GITHUB_TOKEN for release action
              uses: actions/checkout@v4 # Consider removing if files from repo not directly used

            - name: Generate OwnimaBot Token
              id: generate_token
              uses: actions/create-github-app-token@v1
              with:
                  app-id: ${{ secrets.OWNIMA_BOT_APP_ID }}
                  private-key: ${{ secrets.OWNIMA_BOT_PRIVATE_KEY }}

            - name: Download staging build artifact
              uses: actions/download-artifact@v4
              with:
                  name: build-archive-staging
                  # No path specified, defaults to current directory. Files will be build-staging-TAG.tar.gz

            - name: Download production build artifact
              uses: actions/download-artifact@v4
              with:
                  name: build-archive-production
                  # No path specified, defaults to current directory. Files will be build-production-TAG.tar.gz

            - name: List files to verify downloads # Optional debug step
              run: ls -R .

            - name: Publish Release Draft
              id: publish_release
              uses: softprops/action-gh-release@v1
              with:
                  token: ${{ steps.generate_token.outputs.token }}
                  tag_name: ${{ github.ref_name }}
                  name: Release ${{ github.ref_name }}
                  draft: false
                  prerelease: false
                  generate_release_notes: true
                  files: |
                      build-staging-${{ github.ref_name }}.tar.gz
                      build-production-${{ github.ref_name }}.tar.gz
