/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/access-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Auth Access Token
         * @description OAuth2 compatible token auth, get an access token for future requests.
         *
         *     Args:
         *         user_type: Type of user - "owner" or "rider" (default: "owner")
         */
        post: operations["Auth-auth_access_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test Token */
        post: operations["Auth-test_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Token
         * @description OAuth2 compatible refresh token endpoint.
         *     Validates refresh token and returns new access and refresh tokens.
         */
        post: operations["Auth-refresh_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/password-recovery/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Recover Password
         * @description Send password recovery email.
         *
         *     Args:
         *         email: User email address
         *         user_type: Type of user account ("owner" or "rider")
         */
        post: operations["Auth-recover_password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reset-password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Password
         * @description Reset password using token from recovery email.
         *
         *     Token contains both email and user_type information.
         */
        post: operations["Auth-reset_password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/password-recovery-html-content/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Recover Password Html Content
         * @description Get password recovery email HTML content (admin only).
         *
         *     Args:
         *         email: User email address
         *         user_type: Type of user account ("owner" or "rider")
         */
        post: operations["Auth-recover_password_html_content"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/send-code/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Code
         * @description Sends cryptographically secure 6-digit code to validate email.
         *
         *     Args:
         *         email: Email address to send verification code to
         *         user_type: Type of user account ("owner" or "rider")
         */
        post: operations["Auth-send_code"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/verify-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Code
         * @description Verifies code with rate limiting and comprehensive security.
         *
         *     Args:
         *         request: Email and verification code
         *         user_type: Type of user account ("owner" or "rider")
         */
        post: operations["Auth-verify_code"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/account-request-deletion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account Deletion Request
         * @description Shows the account deletion request page.
         */
        get: operations["Account-account_deletion_request"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Config
         * @description Returns app global config and feature flags.
         */
        get: operations["Account-get_config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Vehicles */
        get: operations["Garage-list_vehicles"];
        put?: never;
        /** Create Vehicle */
        post: operations["Garage-create_vehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicle/{vehicle_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Vehicle */
        get: operations["Garage-get_vehicle"];
        /** Update Vehicle */
        put: operations["Garage-update_vehicle"];
        post?: never;
        /** Delete Vehicle */
        delete: operations["Garage-delete_vehicle"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicle/{vehicle_id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy Vehicle
         * @description Copy Vehicle for given id and reg number.
         */
        post: operations["Garage-copy_vehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicle/{vehicle_id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Publish Vehicle
         * @description Publishes specified vehicle with `DRAFT` status.
         */
        post: operations["Garage-publish_vehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicle/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive Vehicle
         * @description Sets status as `ARCHIVED` for specific vehicle.
         */
        post: operations["Garage-archive_vehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicle/delete-drafts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Drafts Vehicle
         * @description Deletes all owner vehicles with `DRAFT` status.
         */
        post: operations["Garage-delete_drafts_vehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/vehicle/status-summary/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vehicle Status Summary
         * @description Gets a summary of vehicle counts grouped by status for the current owner using aggregation.
         */
        get: operations["Garage-get_vehicle_status_summary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extra_option": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Extra Options */
        get: operations["Extra Option-list_extra_options"];
        put?: never;
        /**
         * Create Extra Option
         * @description Creates a new extra options for vehicle.
         */
        post: operations["Extra Option-create_extra_option"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extra_option/{extra_option_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Extra Option */
        get: operations["Extra Option-get_extra_option"];
        /** Update Extra Option */
        put: operations["Extra Option-update_extra_option"];
        post?: never;
        /**
         * Delete Extra Option
         * @description Deletes specified Price Template.
         */
        delete: operations["Extra Option-delete_extra_option"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extra_option/{extra_option_id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy Extra Option
         * @description Copy Vehicle for given id and reg number.
         */
        post: operations["Extra Option-copy_extra_option"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rider/vehicles/{owner_id}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Vehicles
         * @description Search for available vehicles with currency conversion.
         */
        get: operations["Rider-search_vehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rider/vehicles/{owner_id}/{vehicle_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Vehicle
         * @description Get detailed vehicle information (rider view - public info only).
         */
        get: operations["Rider-get_vehicle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rider/vehicles/{owner_id}/{vehicle_id}/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Vehicle Availability
         * @description Check vehicle availability for specific dates.
         */
        post: operations["Rider-check_vehicle_availability"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rider/vehicles/{owner_id}/{vehicle_id}/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculate Pricing
         * @description Calculate comprehensive pricing for vehicle rental with currency conversion support.
         */
        post: operations["Rider-calculate_pricing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rider/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Reservations
         * @description List rider's reservations.
         */
        get: operations["Rider-list_reservations"];
        put?: never;
        /**
         * Create Reservation
         * @description Create a new reservation for a vehicle with calculated pricing.
         */
        post: operations["Rider-create_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rider/reservations/{reservation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Reservation
         * @description Get a specific reservation.
         */
        get: operations["Rider-get_reservation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rider/reservations/{reservation_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Reservation
         * @description Cancel a reservation.
         */
        post: operations["Rider-cancel_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rider/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Rider Profile
         * @description Get current rider's profile information.
         */
        get: operations["Rider-get_rider_profile"];
        put?: never;
        /**
         * Update Rider Profile
         * @description Update current rider's profile information.
         */
        post: operations["Rider-update_rider_profile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rider/owner/{owner_id}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Owner Public Profile
         * @description Get public profile information for an owner.
         */
        get: operations["Rider-get_owner_public_profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Price Templates */
        get: operations["Price Template-list_price_templates"];
        put?: never;
        /**
         * Create Price Template
         * @description Creates a new price template for vehicle.
         */
        post: operations["Price Template-create_price_template"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template/{price_template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Price Template */
        get: operations["Price Template-get_price_template"];
        /** Update Price Template */
        put: operations["Price Template-update_price_template"];
        post?: never;
        /** Delete Price Template */
        delete: operations["Price Template-delete_price_template"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template/{price_template_id}/multiply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Multiply Price Template
         * @description Multiples prices for each Price Template duration interval.
         */
        post: operations["Price Template-multiply_price_template"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template/{price_template_id}/clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Clone Price Template */
        post: operations["Price Template-clone_price_template"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template/{price_template_id}/apply-vehicles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Apply Vehicles
         * @description Calculates and updates the total_vehicles count for old/new price template.
         */
        post: operations["Price Template-apply_vehicles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template/{price_template_id}/duration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Price Duration
         * @description Creates new duration for specified PriceTemplate.
         */
        post: operations["Price Duration-create_price_duration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template/{price_template_id}/duration/{price_duration_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Price Duration
         * @description Updates price duration for specified PriceTemplate.
         */
        put: operations["Price Duration-update_price_duration"];
        post?: never;
        /**
         * Delete Price Duration
         * @description Deletes price duration for specified PriceTemplate.
         */
        delete: operations["Price Duration-delete_price_duration"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template/{price_template_id}/season": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Price Season
         * @description Returns list of price seasons for specified PriceTemplate.
         */
        get: operations["Price Season-list_price_season"];
        put?: never;
        /**
         * Create Price Season
         * @description Creates new price season for specified PriceTemplate.
         */
        post: operations["Price Season-create_price_season"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template/{price_template_id}/season/{price_season_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Price Season
         * @description Updates price season for specified PriceTemplate.
         */
        put: operations["Price Season-update_price_season"];
        post?: never;
        /**
         * Delete Price Season
         * @description Deletes price season for specified PriceTemplate.
         */
        delete: operations["Price Season-delete_price_season"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/price_template/{price_template_id}/season/{price_season_id}/multiply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Multiply Price Season
         * @description Multiples prices for each Price Season duration interval.
         */
        post: operations["Price Season-multiply_price_season"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/time-slot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Time Slots */
        get: operations["Time Slot-list_time_slots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/time-slot/by-vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Time Slots By Vehicle */
        get: operations["Time Slot-list_time_slots_by_vehicle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate reservation time slot for overlaps
         * @description Validate a reservation request for time slot overlaps.
         */
        post: operations["Reservation-validate_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get list prices day by day for a reservation
         * @description Build a list of prices per day for specified dates and Vehicle.
         */
        post: operations["Reservation-prices_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Reservation PENDING by Rider
         * @description Create a new PENDING Reservation for a specified Vehicle and TimeSlot.
         */
        post: operations["Reservation-pending_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Reservation CONFIRMED by Owner
         * @description Confirm a reservation by the owner for a specified vehicle and time slot.
         */
        post: operations["Reservation-confirm_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/conflict-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get list of conflicting reservations for a given vehicle and time period
         * @description Retrieve a list of conflicting reservations for a given time period.
         */
        post: operations["Reservation-reservation_conflict_groups"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/{reservation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Reservation */
        get: operations["Reservation-get_reservation"];
        /**
         * Update an existing reservation
         * @description Update an existing reservation specified by its ID.
         */
        put: operations["Reservation-update_reservation"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/{reservation_id}/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Reservation Prices
         * @description Build a list of prices per day for specified dates and Reservation.
         */
        get: operations["Reservation-get_reservation_prices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Reservations
         * @description Get a list of reservations for the current user, with optional filters.
         */
        get: operations["Reservation-list_reservations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/{reservation_id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of confirmations for Reservation.
         * @description Return ConfirmationHistory for the Reservation specified by its ID.
         */
        get: operations["Reservation-history_reservation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/{reservation_id}/confirmation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Starts CONFIRMATION process for Reservation.
         * @description Complete a reservation by the owner for a specified vehicle and time slot.
         */
        post: operations["Reservation-confirmation_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/{reservation_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set CANCELLED status for Reservation
         * @description Cancel a reservation with a reason by the rider for a specified vehicle and time slot.
         */
        post: operations["Reservation-cancel_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/{reservation_id}/collect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set COLLECTED status for Reservation
         * @description Start a rent-out reservation for a specified vehicle and time slot.
         */
        post: operations["Reservation-collect_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/{reservation_id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set COMPLETED status for Reservation
         * @description Complete a reservation by the owner for a specified vehicle and time slot.
         */
        post: operations["Reservation-complete_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reservation/{reservation_id}/overdue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set OVERDUE status for Reservation.
         * @description Check a reservation by the owner for a specified vehicle and time slot.
         */
        post: operations["Reservation-overdue_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/finance/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Balance
         * @description Gets the wallet balance for the current user.
         *
         *     Phase 1: Only Owner users have wallets. Riders will get 404.
         */
        get: operations["Finance-get_balance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/finance/balance/top-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Top Up Balance
         * @description Top up user's wallet balance.
         */
        post: operations["Finance-top_up_balance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/finance/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Transaction
         * @description Returns a list of transactions for the current user.
         */
        get: operations["Finance-list_transaction"];
        put?: never;
        /**
         * Create External Transaction
         * @description Creates Transaction for RESERVATION or MAINTENANCE source.
         */
        post: operations["Finance-create_external_transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/finance/transaction/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Transactions Monthly
         * @description Returns a list of operations grouped by month.
         */
        get: operations["Finance-list_transactions_monthly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/finance/transaction/external/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Transactions External Monthly
         * @description Returns a list of external (operational) transaction summaries grouped by month.
         */
        get: operations["Finance-list_transactions_external_monthly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/finance/transaction/internal/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Transactions Internal Monthly
         * @description Returns a list of internal (financial) transaction summaries grouped by month.
         */
        get: operations["Finance-list_transactions_internal_monthly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/photo/{doc_index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unzip Entity Photo
         * @description Uploads zip file with photos.
         */
        post: operations["Storage-unzip_entity_photo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/photo/{doc_index}/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Entity Photos
         * @description Uploads photos for specified entity.
         */
        post: operations["Storage-create_entity_photos"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/storage/photo/{doc_index}/{entity_id}/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Entity Cover
         * @description Updates cover photo for specified entity.
         */
        post: operations["Storage-update_entity_cover"];
        /**
         * Delete Entity Photo
         * @description Deletes specified entity photo from storage.
         */
        delete: operations["Storage-delete_entity_photo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Users
         * @description Retrieve users.
         */
        get: operations["User-read_users"];
        put?: never;
        /**
         * Create User
         * @description Create new user.
         */
        post: operations["User-create_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read User Me
         * @description Get current user with address.
         */
        get: operations["User-read_user_me"];
        put?: never;
        post?: never;
        /**
         * Delete User Me
         * @description Delete own user with proper cascading deletes.
         *
         *     Phase 1: Supports both Owner (User) and Rider (RiderUser) deletion.
         */
        delete: operations["User-delete_user_me"];
        options?: never;
        head?: never;
        /**
         * Update User Me
         * @description Update own user.
         */
        patch: operations["User-update_user_me"];
        trace?: never;
    };
    "/api/v1/users/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Password Me
         * @description Update own password.
         */
        patch: operations["User-update_password_me"];
        trace?: never;
    };
    "/api/v1/users/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register User
         * @description Create new Owner user without the need to be logged in.
         */
        post: operations["User-register_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/signup/rider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register Rider User
         * @description Create new Rider user without the need to be logged in.
         *
         *     Note: Same email can be used for both Owner and Rider accounts.
         */
        post: operations["User-register_rider_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read User By Id
         * @description Get a specific user by id.
         */
        get: operations["User-read_user_by_id"];
        put?: never;
        post?: never;
        /**
         * Delete User
         * @description Delete a user with proper cascading deletes.
         */
        delete: operations["User-delete_user"];
        options?: never;
        head?: never;
        /**
         * Update User
         * @description Update a user.
         */
        patch: operations["User-update_user"];
        trace?: never;
    };
    "/api/v1/users/{user_id}/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Transactions
         * @description Get transactions for a specific user (TOP_UP and COMMISSION only).
         */
        get: operations["User-get_user_transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/utils/test-email/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test Email */
        post: operations["Utils-test_email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/utils/health-check/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Enhanced health check with database status.
         */
        get: operations["Utils-health_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/utils/colors/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Colors */
        get: operations["Utils-colors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/utils/car-makes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Car Make */
        get: operations["Utils-car_make"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/utils/currencies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Currencies
         * @description Get list of supported currencies.
         *
         *     Dynamically generated from CurrencyEnum to ensure consistency.
         *     Any new currencies added to CurrencyEnum will automatically appear here.
         */
        get: operations["Utils-get_currencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/utils/rates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Currencies
         * @description Returns a list of currencies.
         */
        get: operations["Utils-list_currencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/utils/languages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Languages
         * @description Get list of supported languages.
         *
         *     Dynamically generated from LanguageEnum to ensure consistency.
         *     Any new languages added to LanguageEnum will automatically appear here.
         */
        get: operations["Utils-get_languages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/metrics/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Block Metrics
         * @description Get all block metrics with comprehensive filtering - Main Plan Endpoint.
         */
        get: operations["Admin-get_block_metrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Admin Users
         * @description Get paginated list of users with admin information and filtering.
         *
         *     Supports filtering by:
         *     - User type (OWNER/RIDER)
         *     - Registration date range
         *     - Inactive users (not logged in for X days)
         *     - Search by email or name
         */
        get: operations["Admin-get_admin_users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/system/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Info Endpoint
         * @description Get comprehensive system information for admin dashboard.
         *
         *     Returns real-time data about:
         *     - Application versions (backend, API, git)
         *     - Environment and configuration
         *     - Database health and type
         *     - Python runtime info
         *     - System uptime
         */
        get: operations["Admin-get_system_info_endpoint"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/system/errors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Errors
         * @description Get recent system errors for admin monitoring.
         *
         *     TODO: Implement proper error logging and retrieval system.
         *     This is a placeholder that returns empty list for now.
         */
        get: operations["Admin-get_recent_errors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/activity/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent User Activities
         * @description Get recent user activities (logins, registrations) for admin monitoring.
         */
        get: operations["Admin-get_recent_user_activities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/activity/vehicles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Vehicle Activities
         * @description Get recent vehicle activities for admin monitoring.
         */
        get: operations["Admin-get_recent_vehicle_activities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/activity/reservations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Reservation Activities
         * @description Get recent reservation activities for admin monitoring.
         */
        get: operations["Admin-get_recent_reservation_activities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/activity/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Activity
         * @deprecated
         * @description Get recent activities for users, vehicles, and reservations.
         *
         *     Optionally filter activities for a specific user by providing user_id.
         */
        get: operations["Admin-get_recent_activity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/users/{user_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Metrics
         * @description Get comprehensive metrics for a specific user.
         *
         *     Returns vehicle counts, reservation statistics, financial data,
         *     and activity metrics for the specified user.
         */
        get: operations["Admin-get_user_metrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/riders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Admin Riders
         * @description Get paginated list of riders with admin information and filtering.
         *
         *     Supports filtering by:
         *     - Registration date range
         *     - Inactive riders (not logged in for X days)
         *     - Search by email or name
         */
        get: operations["Admin-get_admin_riders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/riders/{rider_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Admin Rider
         * @description Get specific rider details for admin.
         */
        get: operations["Admin-get_admin_rider"];
        put?: never;
        post?: never;
        /**
         * Delete Admin Rider
         * @description Delete rider account (admin only).
         */
        delete: operations["Admin-delete_admin_rider"];
        options?: never;
        head?: never;
        /**
         * Update Admin Rider
         * @description Update rider profile (admin only).
         */
        patch: operations["Admin-update_admin_rider"];
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metrics
         * @description Enhanced metrics endpoint with business metrics.
         */
        get: operations["Utils-get_metrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Activity */
        Activity: {
            /** Id */
            id: string;
            /** Timestamp */
            timestamp: string;
            /** User Id */
            user_id: string;
            /** Activity Type */
            activity_type: string;
            /** Details */
            details: {
                [key: string]: unknown;
            };
        };
        /** AdditionalInfo */
        AdditionalInfo: {
            /** Insurance Included */
            insurance_included?: boolean;
            /** Anti Hijack */
            anti_hijack?: boolean;
            /** Full Wheel Drive */
            full_wheel_drive?: boolean;
            /** Auto Transmission */
            auto_transmission?: boolean;
            /** Bluetooth Audio */
            bluetooth_audio?: boolean;
            /** Cruise Control */
            cruise_control?: boolean;
            /** Airbags */
            airbags?: boolean;
            /** Wheelchair Accessible */
            wheelchair_accessible?: boolean;
            stats?: components["schemas"]["PublicationStats"];
        };
        /** AddressPublic */
        AddressPublic: {
            /**
             * Office
             * @description Apartment/office number
             */
            office?: string | null;
            /**
             * Building Number
             * @description Building number
             */
            building_number?: string | null;
            /**
             * Street
             * @description Street name
             */
            street?: string | null;
            /**
             * District
             * @description District
             */
            district?: string | null;
            /**
             * City
             * @description City
             */
            city?: string | null;
            /**
             * Region
             * @description Region/state
             */
            region?: string | null;
            /**
             * County
             * @description County
             */
            county?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** AddressUpdate */
        AddressUpdate: {
            /**
             * Office
             * @description Apartment/office number
             */
            office?: string | null;
            /**
             * Building Number
             * @description Building number
             */
            building_number?: string | null;
            /**
             * Street
             * @description Street name
             */
            street?: string | null;
            /**
             * District
             * @description District
             */
            district?: string | null;
            /**
             * City
             * @description City
             */
            city?: string | null;
            /**
             * Region
             * @description Region/state
             */
            region?: string | null;
            /**
             * County
             * @description County
             */
            county?: string | null;
        };
        /**
         * AdminDashboardMetrics
         * @description Complete 3-block admin dashboard metrics.
         */
        AdminDashboardMetrics: {
            users: components["schemas"]["UserBlockMetrics"];
            vehicles: components["schemas"]["VehicleBlockMetrics"];
            reservations: components["schemas"]["ReservationBlockMetrics"];
        };
        /** Any */
        Any: {
            /** Type Url */
            type_url?: string;
            /**
             * Value
             * Format: binary
             */
            value?: string;
        };
        /** ApplyVehiclesRequest */
        ApplyVehiclesRequest: {
            /** Price Template Id */
            price_template_id?: string;
            /** Vehicle Ids */
            vehicle_ids?: string[];
            /** Deposit Amount */
            deposit_amount?: number;
            /** Minimal Rent Period */
            minimal_rent_period?: number;
        };
        /** ApplyVehiclesResponse */
        ApplyVehiclesResponse: {
            /** Success */
            success?: boolean;
            /** Error */
            error?: string;
        };
        /** ArchiveVehicleRequest */
        ArchiveVehicleRequest: {
            /** Vehicle Id */
            vehicle_id?: string;
        };
        /** ArchiveVehicleResponse */
        ArchiveVehicleResponse: {
            /** Vehicle Id */
            vehicle_id?: string;
            vehicle?: components["schemas"]["Vehicle-Output"];
            /** Error */
            error?: string;
        };
        /** AvailableHour */
        AvailableHour: {
            /** Name */
            name?: string;
            /** Available */
            available?: boolean;
        };
        /** BalanceResponse */
        BalanceResponse: {
            /** Wallet Id */
            wallet_id?: string;
            /** Balance */
            balance?: number;
            /** Currency */
            currency?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
            /** Deadline Timestamp */
            deadline_timestamp?: number;
            /** Online Reservation Balance */
            online_reservation_balance?: number;
        };
        /** BaseValidationError */
        BaseValidationError: {
            /** Error Code */
            error_code: string;
            /** Message */
            message: string;
            /** Detail */
            detail: {
                [key: string]: unknown;
            }[];
        };
        /** Body_Auth-auth_access_token */
        "Body_Auth-auth_access_token": {
            /** Grant Type */
            grant_type?: string | null;
            /** Username */
            username: string;
            /** Password */
            password: string;
            /**
             * Scope
             * @default
             */
            scope: string;
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
        };
        /** Body_Storage-create_entity_photos */
        "Body_Storage-create_entity_photos": {
            /** Request */
            request: string[];
        };
        /** Body_Storage-unzip_entity_photo */
        "Body_Storage-unzip_entity_photo": {
            /**
             * Request
             * Format: binary
             */
            request: string;
        };
        /** CancelReservationRequest */
        CancelReservationRequest: Record<string, never>;
        /** CancelReservationResponse */
        CancelReservationResponse: {
            /** Reservation Id */
            reservation_id?: string;
            reservation?: components["schemas"]["Reservation"];
            /** Error */
            error?: string;
        };
        /** CommissionRate */
        CommissionRate: {
            /** Source */
            source?: string;
            /** Rate */
            rate?: number;
        };
        /** Config */
        Config: {
            /** Commission Rates */
            commission_rates?: components["schemas"]["CommissionRate"][];
            /** Feature Flags */
            feature_flags?: components["schemas"]["FeatureFlag"][];
        };
        /** ConfirmReservationRequest */
        ConfirmReservationRequest: {
            /** Confirm By */
            confirm_by?: string;
            /** Note */
            note?: string;
        };
        /** ConfirmReservationResponse */
        ConfirmReservationResponse: {
            /** Reservation Id */
            reservation_id?: string;
            reservation?: components["schemas"]["Reservation"];
            /** Error */
            error?: string;
        };
        /** Confirmation */
        Confirmation: {
            /** Reservation Id */
            reservation_id?: string;
            /** Rider Id */
            rider_id?: string;
            /** Vehicle Id */
            vehicle_id?: string;
            /**
             * Confirmation Date
             * Format: date-time
             */
            confirmation_date?: string;
            /** By Rider */
            by_rider?: boolean;
            /** By Owner */
            by_owner?: boolean;
            /** Auto */
            auto?: boolean;
            /** Confirmation Note */
            confirmation_note?: string;
            status?: components["schemas"]["ReservationStatus"];
            /**
             * Expiration Date
             * Format: date-time
             */
            expiration_date?: string;
            /** Cancellation Reason */
            cancellation_reason?: string;
            /** Other */
            other?: {
                [key: string]: components["schemas"]["Any"];
            };
        };
        /** ConfirmationHistory */
        ConfirmationHistory: {
            /** Reservation Id */
            reservation_id?: string;
            /** Confirmations */
            confirmations?: components["schemas"]["Confirmation"][];
        };
        /** ConfirmationReservationResponse */
        ConfirmationReservationResponse: {
            /** Reservation Id */
            reservation_id?: string;
            reservation?: components["schemas"]["Reservation"];
            /** Error */
            error?: string;
        };
        /** ConflictGroup */
        ConflictGroup: {
            /** Vehicle Id */
            vehicle_id?: string;
            /** Conflict Reservations */
            conflict_reservations?: components["schemas"]["ConflictReservation"][];
            /** Price Min */
            price_min?: number;
            /** Price Max */
            price_max?: number;
            /**
             * Date From
             * Format: date-time
             */
            date_from?: string;
            /**
             * Date To
             * Format: date-time
             */
            date_to?: string;
            /** Total */
            total?: number;
        };
        /** ConflictReservation */
        ConflictReservation: {
            /** Id */
            id?: string;
            status?: components["schemas"]["ReservationStatus"];
            /**
             * Date From
             * Format: date-time
             */
            date_from?: string;
            /**
             * Date To
             * Format: date-time
             */
            date_to?: string;
            /** Total Price */
            total_price?: number;
            humanized?: components["schemas"]["Humanized"];
        };
        /** ConflictReservationResponse */
        ConflictReservationResponse: {
            /** Groups */
            groups?: components["schemas"]["ConflictGroup"][];
        };
        /** CreateExtraOptionRequest */
        CreateExtraOptionRequest: {
            extra_option?: components["schemas"]["ExtraOption"];
        };
        /** CreateExtraOptionResponse */
        CreateExtraOptionResponse: {
            extra_option?: components["schemas"]["ExtraOption"];
            /** Error */
            error?: string;
        };
        /** CreatePriceDurationRequest */
        CreatePriceDurationRequest: {
            duration?: components["schemas"]["Interval"];
            /** Price Template Id */
            price_template_id?: string;
        };
        /** CreatePriceDurationResponse */
        CreatePriceDurationResponse: {
            /** Durations */
            durations?: components["schemas"]["Interval"][];
            /** Price Template Id */
            price_template_id?: string;
            /** Error */
            error?: string;
        };
        /** CreatePriceSeasonRequest */
        CreatePriceSeasonRequest: {
            season?: components["schemas"]["SeasonPrice"];
            /** Price Template Id */
            price_template_id?: string;
            /** Multiplier */
            multiplier?: number;
        };
        /** CreatePriceSeasonResponse */
        CreatePriceSeasonResponse: {
            season?: components["schemas"]["SeasonPrice"];
            /** Price Template Id */
            price_template_id?: string;
            /** Error */
            error?: string;
        };
        /** CreatePriceTemplateRequest */
        CreatePriceTemplateRequest: {
            price_template?: components["schemas"]["PriceTemplate-Input"];
        };
        /** CreatePriceTemplateResponse */
        CreatePriceTemplateResponse: {
            /** Price Template Id */
            price_template_id?: string;
            price_template?: components["schemas"]["PriceTemplate-Output"];
            /** Error */
            error?: string;
        };
        /** CreateReservationRequest */
        CreateReservationRequest: {
            /** Vehicle Id */
            vehicle_id?: string;
            /** Rider Id */
            rider_id?: string;
            /**
             * Date From
             * Format: date-time
             */
            date_from?: string;
            /**
             * Date To
             * Format: date-time
             */
            date_to?: string;
            /** Pick Up Time */
            pick_up_time?: string;
            /** Drop Off Time */
            drop_off_time?: string;
            selected_extra_options?: components["schemas"]["SelectedExtraOptions"];
        };
        /** CreateTransactionRequest */
        CreateTransactionRequest: {
            /** Operation */
            operation?: number;
            /** Type */
            type?: string;
            /** Amount */
            amount?: number;
            /**
             * Date
             * Format: date-time
             */
            date?: string;
            /** Vehicle Id */
            vehicle_id?: string;
            /** Description */
            description?: string;
            /** Transaction Source */
            transaction_source?: string;
            /** User Id */
            user_id?: string;
            /** Finance Group */
            finance_group?: string;
        };
        /** CreateTransactionResponse */
        CreateTransactionResponse: {
            /** Transaction Id */
            transaction_id?: string;
            transaction?: components["schemas"]["Transaction"];
            /** Error */
            error?: string;
        };
        /** CreateVehicleRequest */
        CreateVehicleRequest: {
            vehicle?: components["schemas"]["Vehicle-Input"];
        };
        /** CreateVehicleResponse */
        CreateVehicleResponse: {
            /** Vehicle Id */
            vehicle_id?: string;
            vehicle?: components["schemas"]["Vehicle-Output"];
            /** Error */
            error?: string;
        };
        /**
         * CurrencyEnum
         * @description Describes base User currencies.
         * @enum {string}
         */
        CurrencyEnum: "USD" | "EUR" | "RUB" | "THB" | "VND" | "IDR";
        /**
         * CustomerSource
         * @description CustomerSource specifies the source of the customer.
         * @enum {integer}
         */
        CustomerSource: 0 | 1 | 2 | 3;
        /** DeletePriceSeasonResponse */
        DeletePriceSeasonResponse: {
            /** Success */
            success?: boolean;
            /** Error */
            error?: string;
        };
        /** DropOff */
        DropOff: {
            point?: components["schemas"]["Point"];
            /** Location */
            location?: string;
            /** Mileage */
            mileage?: number;
            status?: components["schemas"]["PickUpDropOffStatus"];
            return_time?: components["schemas"]["TimeRange"];
            /**
             * Deadline
             * Format: date-time
             */
            deadline?: string;
            /** Asked Early Return */
            asked_early_return?: boolean;
            /** Asked Late Return */
            asked_late_return?: boolean;
            /** Extra Price */
            extra_price?: number;
            /** Fuel Level */
            fuel_level?: number;
        };
        /** Duration */
        Duration: {
            /** Days */
            days?: number;
            /** Hours */
            hours?: number;
        };
        /** ExtraDetails */
        ExtraDetails: {
            /** Deposit Amount */
            deposit_amount?: number;
            /** Minimal Rent Period */
            minimal_rent_period?: number;
            /** Template Name */
            template_name?: string;
            /** Total Vehicles */
            total_vehicles?: number;
            /** Total Season Prices */
            total_season_prices?: number;
            stats?: components["schemas"]["PublicationStats"];
        };
        /** ExtraOption */
        ExtraOption: {
            /** Id */
            id?: string;
            /** Owner Id */
            owner_id?: string;
            /** Name */
            name?: string;
            /** Price */
            price?: number;
            price_per?: components["schemas"]["ExtraOptionPricePer"];
            /** Extra Option Type */
            extra_option_type?: string;
            /** Is Mandatory */
            is_mandatory?: boolean;
            /** Description */
            description?: string;
            /** Vehicle Ids */
            vehicle_ids?: string[];
            /** Total Vehicles */
            total_vehicles?: number;
        };
        /**
         * ExtraOptionPricePer
         * @enum {integer}
         */
        ExtraOptionPricePer: 0 | 1 | 2 | 3 | 4;
        /** ExtraPreview */
        ExtraPreview: {
            /** Previews */
            previews?: {
                [key: string]: string;
            };
        };
        /** FeatureFlag */
        FeatureFlag: {
            /** Feature Name */
            feature_name?: string;
            /** Enabled */
            enabled?: boolean;
        };
        /** FileMetadata */
        FileMetadata: {
            /** Id */
            id?: string;
            /** Entity Id */
            entity_id?: string;
            /** Owner Id */
            owner_id?: string;
            /** File Uri */
            file_uri?: string;
            /** Bucket Name */
            bucket_name?: string;
            operation?: components["schemas"]["FileMetadataOperation"];
        };
        /**
         * FileMetadataOperation
         * @enum {integer}
         */
        FileMetadataOperation: 0 | 1 | 2 | 3;
        /** GeneralInfo */
        GeneralInfo: {
            /** Reg Number */
            reg_number?: string;
            /** Brand */
            brand?: string;
            /** Model */
            model?: string;
            /** Color */
            color?: string;
            /** Year */
            year?: number;
            /** Environment */
            environment?: string;
            /** Vehicle Class */
            vehicle_class?: string;
            /** Body Type */
            body_type?: string;
            stats?: components["schemas"]["PublicationStats"];
        };
        /** GetConfigResponse */
        GetConfigResponse: {
            config?: components["schemas"]["Config"];
        };
        /** GetExtraOptionResponse */
        GetExtraOptionResponse: {
            extra_option?: components["schemas"]["ExtraOption"];
            /** Error */
            error?: string;
            /** Vehicles */
            vehicles?: components["schemas"]["Vehicle-Output"][];
        };
        /** GetPriceTemplateResponse */
        GetPriceTemplateResponse: {
            price_template?: components["schemas"]["PriceTemplate-Output"];
            /** Error */
            error?: string;
            /** Vehicles */
            vehicles?: components["schemas"]["Vehicle-Output"][];
        };
        /** GetReservationResponse */
        GetReservationResponse: {
            /** Reservation Id */
            reservation_id?: string;
            reservation?: components["schemas"]["Reservation"];
            /** Error */
            error?: string;
        };
        /** GetVehicleResponse */
        GetVehicleResponse: {
            /** Vehicle Id */
            vehicle_id?: string;
            vehicle?: components["schemas"]["Vehicle-Output"];
            /** Error */
            error?: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HistoryReservationResponse */
        HistoryReservationResponse: {
            history?: components["schemas"]["ConfirmationHistory"];
        };
        /** Humanized */
        Humanized: {
            /** Date From */
            date_from?: string;
            /** Date To */
            date_to?: string;
            /** Id */
            id?: string;
            /** Status */
            status?: string;
            /** Source */
            source?: string;
            /** Owner Id */
            owner_id?: string;
            /** Booking Id */
            booking_id?: string;
        };
        /** Interval */
        Interval: {
            /** Id */
            id?: string;
            /** Days Amount From */
            days_amount_from?: number;
            /** Days Amount To */
            days_amount_to?: number;
            /** Price Per Day */
            price_per_day?: number;
        };
        /** Invoice */
        Invoice: {
            /** Prices */
            prices?: {
                [key: string]: number;
            };
            /** Price By Days */
            price_by_days?: components["schemas"]["PriceDayDetail"][];
            /** Total Price */
            total_price?: number;
            /** Currency */
            currency?: string;
            /** Reservation Id */
            reservation_id?: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date?: string;
            /** Price Template Name */
            price_template_name?: string;
            commission?: components["schemas"]["ReservationCommission"];
        };
        /**
         * LanguageEnum
         * @description Describes base User languages.
         * @enum {string}
         */
        LanguageEnum: "EN" | "RU" | "TH" | "VI" | "ID";
        /** ListCurrencyRatesResponse */
        ListCurrencyRatesResponse: {
            /** Rates */
            rates?: components["schemas"]["Rate"][];
        };
        /** ListExtraOptionsResponse */
        ListExtraOptionsResponse: {
            /** Extra Options */
            extra_options?: components["schemas"]["ExtraOption"][];
            /** Error */
            error?: string;
            /** Total */
            total?: number;
        };
        /** ListPriceSeasonsResponse */
        ListPriceSeasonsResponse: {
            /** Seasons */
            seasons?: components["schemas"]["SeasonPrice"][];
            /** Price Template Id */
            price_template_id?: string;
            /** Price Template Name */
            price_template_name?: string;
            /** Error */
            error?: string;
        };
        /** ListPriceTemplatesResponse */
        ListPriceTemplatesResponse: {
            /** Price Templates */
            price_templates?: components["schemas"]["PriceTemplate-Output"][];
            /** Success */
            success?: boolean;
            /** Error */
            error?: string;
            pagination?: components["schemas"]["Pagination"];
        };
        /** ListReservationsResponse */
        ListReservationsResponse: {
            /** Status */
            status?: string;
            /** Reservations */
            reservations?: components["schemas"]["Reservation"][];
            /** Error */
            error?: string;
            pagination?: components["schemas"]["Pagination"];
        };
        /** ListTimeSlotsByVehicleResponse */
        ListTimeSlotsByVehicleResponse: {
            /** Vehicle Time Slots */
            vehicle_time_slots?: {
                [key: string]: components["schemas"]["VehicleTimeSlots"];
            };
            /** Error */
            error?: string;
            pagination?: components["schemas"]["Pagination"];
        };
        /** ListTimeSlotsResponse */
        ListTimeSlotsResponse: {
            /** Time Slots */
            time_slots?: components["schemas"]["TimeSlot"][];
            /** Error */
            error?: string;
            pagination?: components["schemas"]["Pagination"];
        };
        /** ListTransactionsResponse */
        ListTransactionsResponse: {
            /** Transactions */
            transactions?: components["schemas"]["Transaction"][];
            pagination?: components["schemas"]["Pagination"];
        };
        /** ListVehiclesResponse */
        ListVehiclesResponse: {
            /** Status */
            status?: string;
            /** Vehicles */
            vehicles?: components["schemas"]["Vehicle-Output"][];
            /** Error */
            error?: string;
            pagination?: components["schemas"]["Pagination"];
        };
        /** Message */
        Message: {
            /** Message */
            message: string;
        };
        /** MultiplyPriceSeasonRequest */
        MultiplyPriceSeasonRequest: {
            /** Multiplier */
            multiplier?: number;
            /** Price Template Id */
            price_template_id?: string;
        };
        /** MultiplyPriceSeasonResponse */
        MultiplyPriceSeasonResponse: {
            season?: components["schemas"]["SeasonPrice"];
            /** Error */
            error?: string;
        };
        /** MultiplyPriceTemplateRequest */
        MultiplyPriceTemplateRequest: {
            /** Multiplier */
            multiplier?: number;
            /** Price Template Id */
            price_template_id?: string;
        };
        /** MultiplyPriceTemplateResponse */
        MultiplyPriceTemplateResponse: {
            /** Error */
            error?: string;
        };
        /** NewPassword */
        NewPassword: {
            /** Token */
            token: string;
            /** New Password */
            new_password: string;
        };
        /**
         * OccupancyEnum
         * @description Describes Time Slot occupancy type for reservation.
         * @enum {string}
         */
        OccupancyEnum: "RESERVATION" | "MAINTENANCE";
        /**
         * OperationType
         * @description Enum for transaction operation type
         * @enum {integer}
         */
        OperationType: 0 | 1 | 2;
        /**
         * OwnerPublicProfile
         * @description Schema for public owner profile information.
         */
        OwnerPublicProfile: {
            /**
             * Id
             * @description Owner unique identifier
             */
            id: string;
            /**
             * Name
             * @description Display name (business name or full name)
             */
            name: string;
            /**
             * Avatar
             * @description Profile photo URL
             */
            avatar?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            /**
             * Address
             * @description Formatted address string
             */
            address?: string | null;
            /**
             * Location
             * @description General location
             */
            location?: string | null;
            /**
             * Rent Service Name
             * @description Rental service name
             */
            rent_service_name?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Account creation date
             */
            created_at: string;
        };
        /** PaginatedActivityResponse */
        PaginatedActivityResponse: {
            /** Data */
            data: components["schemas"]["Activity"][];
            /** Total */
            total: number;
        };
        /** Pagination */
        Pagination: {
            /** Limit */
            limit?: number;
            /** Offset */
            offset?: number;
            /** Page Token */
            page_token?: string;
            sort_order?: components["schemas"]["SortOrder"];
            /** Total */
            total?: number;
        };
        /**
         * PaymentMethod
         * @description Enum representing the payment method.
         * @enum {integer}
         */
        PaymentMethod: 0 | 1 | 2;
        /** PendingReservationResponse */
        PendingReservationResponse: {
            /** Reservation Id */
            reservation_id?: string;
            reservation?: components["schemas"]["Reservation"];
            /** Error */
            error?: string;
        };
        /** PickUp */
        PickUp: {
            point?: components["schemas"]["Point"];
            /** Location */
            location?: string;
            /** Mileage */
            mileage?: number;
            status?: components["schemas"]["PickUpDropOffStatus"];
            collect_time?: components["schemas"]["TimeRange"];
            /** Asked Early Pickup */
            asked_early_pickup?: boolean;
            /** Asked Late Pickup */
            asked_late_pickup?: boolean;
            /** Extra Price */
            extra_price?: number;
            /** Fuel Level */
            fuel_level?: number;
        };
        /**
         * PickUpDropOffStatus
         * @description PickUpDropOffStatus represents the status of a pickup or drop-off.
         * @enum {integer}
         */
        PickUpDropOffStatus: 0 | 1 | 2 | 3;
        /** Picture */
        Picture: {
            /** Cover */
            cover?: string;
            /** Extra */
            extra?: string[];
            /** Cover Previews */
            cover_previews?: {
                [key: string]: string;
            };
            /** Extra Previews */
            extra_previews?: {
                [key: string]: components["schemas"]["ExtraPreview"];
            };
        };
        /** Point */
        Point: {
            /** Lat */
            lat?: number;
            /** Lon */
            lon?: number;
        };
        /** PriceConversion */
        PriceConversion: {
            /** Amount */
            amount?: number;
            /** Currency */
            currency?: string;
            /** Rate */
            rate?: number;
            /**
             * Valid Until
             * Format: date-time
             */
            valid_until?: string;
        };
        /** PriceDayDetail */
        PriceDayDetail: {
            /**
             * Day
             * Format: date-time
             */
            day?: string;
            /** Humanized Day */
            humanized_day?: string;
            /** Price */
            price?: number;
            /** Is Season Price */
            is_season_price?: boolean;
        };
        /** PriceTemplate */
        "PriceTemplate-Input": {
            /** Id */
            id?: string;
            /** Template Name */
            template_name?: string;
            /** Currency */
            currency?: string;
            /** Durations */
            durations?: components["schemas"]["Interval"][];
            /** Season Prices */
            season_prices?: components["schemas"]["SeasonPrice"][];
            /** Owner Id */
            owner_id?: string;
            /** Total Vehicles */
            total_vehicles?: number;
            /** Total Season Prices */
            total_season_prices?: number;
            /**
             * Created Date
             * Format: date-time
             */
            created_date?: string;
            /** Vehicle Ids */
            vehicle_ids?: string[];
        };
        /** PriceTemplate */
        "PriceTemplate-Output": {
            /** Id */
            id?: string;
            /** Template Name */
            template_name?: string;
            /** Currency */
            currency?: string;
            /** Durations */
            durations?: components["schemas"]["Interval"][];
            /** Season Prices */
            season_prices?: components["schemas"]["SeasonPrice"][];
            /** Owner Id */
            owner_id?: string;
            /** Total Vehicles */
            total_vehicles?: number;
            /** Total Season Prices */
            total_season_prices?: number;
            /**
             * Created Date
             * Format: date-time
             */
            created_date?: string;
            /** Vehicle Ids */
            vehicle_ids?: string[];
        };
        /** PublicationStats */
        PublicationStats: {
            /** Ready For Publish */
            ready_for_publish?: boolean;
            /** Checked Ratio */
            checked_ratio?: number;
            /** Total Fields */
            total_fields?: number;
            /** Filled Fields */
            filled_fields?: number;
            /** Visited */
            visited?: boolean;
        };
        /** Rate */
        Rate: {
            /** Base Currency */
            base_currency?: string;
            /** Target Currency */
            target_currency?: string;
            /** Rate */
            rate?: number;
            /** Inverse Rate */
            inverse_rate?: number;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp?: string;
            /** Symbol */
            symbol?: string;
            /** Name */
            name?: string;
        };
        /**
         * RecentActivity
         * @description Container model for recent activities across different domains.
         */
        RecentActivity: {
            /** Users */
            users: components["schemas"]["UserActivity"][];
            /** Vehicles */
            vehicles: components["schemas"]["VehicleActivity"][];
            /** Reservations */
            reservations: components["schemas"]["ReservationActivity"][];
        };
        /** RefreshTokenRequest */
        RefreshTokenRequest: {
            /** Refresh Token */
            refresh_token: string;
        };
        /** Reservation */
        Reservation: {
            /** Id */
            id?: string;
            status?: components["schemas"]["ReservationStatus"];
            /**
             * Date From
             * Format: date-time
             */
            date_from?: string;
            /**
             * Date To
             * Format: date-time
             */
            date_to?: string;
            /** Total Price */
            total_price?: number;
            /** Currency */
            currency?: string;
            /** Is Paid */
            is_paid?: boolean;
            rider?: components["schemas"]["Rider"];
            vehicle?: components["schemas"]["Vehicle-Output"];
            /** Extras */
            extras?: {
                [key: string]: components["schemas"]["ReservationExtra"];
            };
            time_slot?: components["schemas"]["TimeSlot"];
            /** Owner Id */
            owner_id?: string;
            duration?: components["schemas"]["Duration"];
            source?: components["schemas"]["CustomerSource"];
            pick_up?: components["schemas"]["PickUp"];
            drop_off?: components["schemas"]["DropOff"];
            invoice?: components["schemas"]["Invoice"];
            /**
             * Created Date
             * Format: date-time
             */
            created_date?: string;
            /**
             * Last Updated Date
             * Format: date-time
             */
            last_updated_date?: string;
            /** Utm */
            utm?: string;
            /** Deposit */
            deposit?: number;
            /** Note */
            note?: string;
            /** Other Details */
            other_details?: {
                [key: string]: components["schemas"]["Any"];
            };
            humanized?: components["schemas"]["Humanized"];
            /** Deadline Timestamp */
            deadline_timestamp?: number;
            picture?: components["schemas"]["Picture"];
            /** Vehicle Id */
            vehicle_id?: string;
            /** Need Attention */
            need_attention?: boolean;
            /** Extra Option Ids */
            extra_option_ids?: string[];
            /** Selected Extra Options */
            selected_extra_options?: components["schemas"]["SelectedExtraOptionItem"][];
            /** Allowed To Collect */
            allowed_to_collect?: boolean;
            /** Owner Phone */
            owner_phone?: string;
        };
        /**
         * ReservationActivity
         * @description Model for a single reservation activity event.
         */
        ReservationActivity: {
            /** Timestamp */
            timestamp: string;
            /** Activity Type */
            activity_type: string;
            /** Details */
            details: {
                [key: string]: unknown;
            };
        };
        /**
         * ReservationBlockMetrics
         * @description Reservation metrics for admin dashboard - Plan Compliant.
         */
        ReservationBlockMetrics: {
            /**
             * Total
             * @default 0
             */
            total: number;
            /**
             * Pending
             * @default 0
             */
            pending: number;
            /**
             * Confirmed
             * @default 0
             */
            confirmed: number;
            /**
             * Collected
             * @default 0
             */
            collected: number;
            /**
             * Completed
             * @default 0
             */
            completed: number;
            /**
             * Cancelled
             * @default 0
             */
            cancelled: number;
            /**
             * Maintenance
             * @default 0
             */
            maintenance: number;
        };
        /**
         * ReservationCollect
         * @description Schema for collecting a reservation.
         */
        ReservationCollect: {
            /**
             * Note
             * @default
             */
            note: string;
            /**
             * Mile
             * @default 0
             */
            mile: number;
            /**
             * Fuel Level
             * @default 0
             */
            fuel_level: number;
            /**
             * Rider Rate
             * @default 1
             */
            rider_rate: number;
            /**
             * Feedback
             * @default
             */
            feedback: string;
        };
        /** ReservationCommission */
        ReservationCommission: {
            /** Source */
            source?: string;
            /** Value */
            value?: number;
            /** Currency */
            currency?: string;
            /**
             * Date
             * Format: date-time
             */
            date?: string;
            balance?: components["schemas"]["ReservationCommissionOnlineBalance"];
        };
        /** ReservationCommissionOnlineBalance */
        ReservationCommissionOnlineBalance: {
            /** Start */
            start?: number;
            /** End */
            end?: number;
        };
        /**
         * ReservationComplete
         * @description Schema for completing a reservation.
         */
        ReservationComplete: {
            /**
             * Note
             * @default
             */
            note: string;
            /**
             * Mile
             * @default 0
             */
            mile: number;
            /**
             * Fuel Level
             * @default 0
             */
            fuel_level: number;
            /**
             * Rider Rate
             * @default 1
             */
            rider_rate: number;
            /**
             * Feedback
             * @default
             */
            feedback: string;
        };
        /**
         * ReservationCreate
         * @description Schema for creating a new reservation.
         */
        ReservationCreate: {
            /** Vehicle Id */
            vehicle_id: string;
            rider: components["schemas"]["Rider"];
            /**
             * Date From
             * Format: date-time
             */
            date_from: string;
            /**
             * Date To
             * Format: date-time
             */
            date_to: string;
            /** Total Price */
            total_price: number;
            /**
             * Pick Up Time
             * @default
             */
            pick_up_time: string;
            /**
             * Drop Off Time
             * @default
             */
            drop_off_time: string;
            /**
             * Payment Confirmed
             * @default false
             */
            payment_confirmed: boolean;
            /**
             * Note
             * @default
             */
            note: string;
            /** @default RESERVATION */
            occupancy: components["schemas"]["OccupancyEnum"];
            /** Deposit Amount */
            deposit_amount?: number | null;
            /** Minimal Rent Period */
            minimal_rent_period?: number | null;
            /** @default 0 */
            reservation_type: components["schemas"]["ReservationType"];
            selected_extra_options?: components["schemas"]["SelectedExtraOptions"] | null;
            /** Deadline Timestamp */
            deadline_timestamp?: number | null;
        };
        /** ReservationExtra */
        ReservationExtra: {
            /** Note */
            note?: string;
            /** Mile */
            mile?: number;
            /** Fuel Level */
            fuel_level?: number;
            /** Rider Rate */
            rider_rate?: number;
            /** Feedback */
            feedback?: string;
        };
        /**
         * ReservationStatus
         * @description ReservationStatus specifies the current status of a reservation.
         * @enum {integer}
         */
        ReservationStatus: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
        /**
         * ReservationType
         * @description ReservationType specifies the type of reservation.
         * @enum {integer}
         */
        ReservationType: 0 | 1 | 2 | 3;
        /**
         * ReservationUpdate
         * @description Schema for updating an existing reservation.
         */
        ReservationUpdate: {
            rider?: components["schemas"]["Rider"] | null;
            /**
             * Note
             * @default
             */
            note: string;
        };
        /** Rider */
        Rider: {
            /** Id */
            id?: string;
            /** Name */
            name?: string;
            /** Phone */
            phone?: string;
            /** Email */
            email?: string;
            /** Ip */
            ip?: string;
            /** User Agent */
            user_agent?: string;
            /** Rating */
            rating?: number;
            /** Avatar */
            avatar?: string;
        };
        /**
         * RiderProfileResponse
         * @description Schema for rider profile information.
         */
        RiderProfileResponse: {
            /**
             * Id
             * @description Rider unique identifier
             */
            id: string;
            /**
             * Email
             * @description Email address
             */
            email: string;
            /**
             * Full Name
             * @description Full name
             */
            full_name?: string | null;
            /**
             * Phone
             * @description Phone number
             */
            phone?: string | null;
            /**
             * Avatar
             * @description Profile photo URL
             */
            avatar?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Location
             * @description Location
             */
            location?: string | null;
            /**
             * Currency
             * @description Preferred currency
             */
            currency?: string | null;
            /**
             * Language
             * @description Preferred language
             */
            language?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Account creation date
             */
            created_at: string;
        };
        /**
         * RiderUserAdmin
         * @description Admin view of rider with tracking information.
         */
        RiderUserAdmin: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean;
            /**
             * Is Beta Tester
             * @description User is in beta testing program
             * @default false
             */
            is_beta_tester: boolean;
            /** Full Name */
            full_name?: string | null;
            /** @default USD */
            currency: components["schemas"]["CurrencyEnum"] | null;
            /** @default EN */
            language: components["schemas"]["LanguageEnum"] | null;
            /** Location */
            location?: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Login At */
            last_login_at?: string | null;
            /**
             * Login Count
             * @default 0
             */
            login_count: number;
        };
        /** RiderUserRegister */
        RiderUserRegister: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
            /** Full Name */
            full_name?: string | null;
        };
        /** RiderUserUpdate */
        RiderUserUpdate: {
            /** Email */
            email?: string | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean;
            /**
             * Is Beta Tester
             * @description User is in beta testing program
             * @default false
             */
            is_beta_tester: boolean;
            /** Full Name */
            full_name?: string | null;
            /** @default USD */
            currency: components["schemas"]["CurrencyEnum"] | null;
            /** @default EN */
            language: components["schemas"]["LanguageEnum"] | null;
            /** Location */
            location?: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            /** Password */
            password?: string | null;
        };
        /**
         * RiderUserWithToken
         * @description Rider user with authentication token (for signup/login responses).
         */
        RiderUserWithToken: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean;
            /**
             * Is Beta Tester
             * @description User is in beta testing program
             * @default false
             */
            is_beta_tester: boolean;
            /** Full Name */
            full_name?: string | null;
            /** @default USD */
            currency: components["schemas"]["CurrencyEnum"] | null;
            /** @default EN */
            language: components["schemas"]["LanguageEnum"] | null;
            /** Location */
            location?: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
        };
        /**
         * RiderUsersAdmin
         * @description Paginated admin response for riders.
         */
        RiderUsersAdmin: {
            /** Data */
            data: components["schemas"]["RiderUserAdmin"][];
            /** Count */
            count: number;
        };
        /**
         * RoleEnum
         * @description Describes base User roles.
         * @enum {string}
         */
        RoleEnum: "AUTO" | "ADMIN" | "OWNER" | "RIDER";
        /** SearchVehiclesResponse */
        SearchVehiclesResponse: {
            /** Vehicles */
            vehicles?: components["schemas"]["Vehicle-Output"][];
            pagination?: components["schemas"]["Pagination"];
        };
        /** SeasonPrice */
        SeasonPrice: {
            /** Id */
            id?: string;
            /** Season Name */
            season_name?: string;
            /** Currency */
            currency?: string;
            /** Durations */
            durations?: components["schemas"]["Interval"][];
            /**
             * Date From
             * Format: date-time
             */
            date_from?: string;
            /**
             * Date To
             * Format: date-time
             */
            date_to?: string;
            price_per?: components["schemas"]["SeasonPricePricePer"];
            /** Rent Period */
            rent_period?: number;
            /** Total Vehicles */
            total_vehicles?: number;
            /**
             * Created Date
             * Format: date-time
             */
            created_date?: string;
            /** Owner Id */
            owner_id?: string;
            /** Multiplier */
            multiplier?: number;
            humanized?: components["schemas"]["Humanized"];
        };
        /**
         * SeasonPricePricePer
         * @enum {integer}
         */
        SeasonPricePricePer: 0 | 1 | 2 | 3;
        /** SelectedExtraOptionItem */
        SelectedExtraOptionItem: {
            extra_option?: components["schemas"]["ExtraOption"];
            /** Calculated Price */
            calculated_price?: number;
        };
        /** SelectedExtraOptions */
        SelectedExtraOptions: {
            /** Ids */
            ids?: string[];
        };
        /**
         * SortOrder
         * @description SortOrder defines the sorting direction.
         * @enum {integer}
         */
        SortOrder: 0 | 1 | 2;
        /** SpecificationInfo */
        SpecificationInfo: {
            /** Steering Wheels */
            steering_wheels?: string;
            /** Number Of Seats */
            number_of_seats?: number;
            /** Fuel Type */
            fuel_type?: string;
            /** Fuel Consumption */
            fuel_consumption?: number;
            /** Drive Range */
            drive_range?: number;
            /** Engine Capacity */
            engine_capacity?: number;
            /** Mileage */
            mileage?: number;
            /** Doors */
            doors?: number;
            /** Transmission */
            transmission?: string;
            stats?: components["schemas"]["PublicationStats"];
            /** Fuel Level */
            fuel_level?: number;
        };
        /** TimeRange */
        TimeRange: {
            /** Start */
            start?: string;
            /** End */
            end?: string;
        };
        /** TimeSlot */
        TimeSlot: {
            /** Id */
            id?: string;
            /** Vehicle Id */
            vehicle_id?: string;
            /** Owner Id */
            owner_id?: string;
            /**
             * Date From
             * Format: date-time
             */
            date_from?: string;
            /**
             * Date To
             * Format: date-time
             */
            date_to?: string;
            occupancy_type?: components["schemas"]["TimeSlotOccupancy"];
            /** Reservation Id */
            reservation_id?: string;
            /** Maintenance Id */
            maintenance_id?: string;
            humanized?: components["schemas"]["Humanized"];
            /** Asked */
            asked?: {
                [key: string]: boolean;
            };
        };
        /**
         * TimeSlotOccupancy
         * @enum {integer}
         */
        TimeSlotOccupancy: 0 | 1 | 2;
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            /** Refresh Token */
            refresh_token?: string | null;
        };
        /** TopUpRequest */
        TopUpRequest: {
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /** Amount */
            amount: number;
            /** Transaction Id */
            transaction_id: string;
        };
        /** TopUpResponse */
        TopUpResponse: {
            /** Status */
            status: string;
            /** New Balance */
            new_balance: number;
            /** Transaction Id */
            transaction_id: string;
            /**
             * Wallet Id
             * Format: uuid
             */
            wallet_id: string;
        };
        /** Transaction */
        Transaction: {
            /** Id */
            id?: string;
            operation?: components["schemas"]["OperationType"];
            /** Transaction Type */
            transaction_type?: string;
            /** Amount */
            amount?: number;
            /**
             * Date
             * Format: date-time
             */
            date?: string;
            /** Vehicle Id */
            vehicle_id?: string;
            /** Vehicle Name */
            vehicle_name?: string;
            /** Vehicle Picture */
            vehicle_picture?: string;
            /** Reservation Id */
            reservation_id?: string;
            /** Owner Id */
            owner_id?: string;
            /** Description */
            description?: string;
            /** Invoice Details */
            invoice_details?: string;
            status?: components["schemas"]["TransactionStatus"];
            payment_method?: components["schemas"]["PaymentMethod"];
            /** Finance Group */
            finance_group?: string;
            /** Wallet Id */
            wallet_id?: string;
            /** Commission Rate */
            commission_rate?: number;
            /** Commission Amount */
            commission_amount?: number;
            /** Net Amount */
            net_amount?: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /** TransactionInternal */
        TransactionInternal: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /** Transaction Type */
            transaction_type: string;
            /** Amount */
            amount: number;
            /** Commission Rate */
            commission_rate: number | null;
            /** Commission Amount */
            commission_amount: number | null;
            /** Net Amount */
            net_amount: number;
            status: components["schemas"]["TransactionStatusEnum"];
            /** Description */
            description: string | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
            /** Reference Id */
            reference_id: string | null;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /**
             * Wallet Id
             * Format: uuid
             */
            wallet_id: string;
        };
        /** TransactionList */
        TransactionList: {
            /** Transactions */
            transactions?: components["schemas"]["Transaction"][];
        };
        /**
         * TransactionStatus
         * @description Enum for transaction status
         * @enum {integer}
         */
        TransactionStatus: 0 | 1 | 2 | 3 | 4 | 5;
        /**
         * TransactionStatusEnum
         * @enum {string}
         */
        TransactionStatusEnum: "PENDING" | "CONFIRMED" | "FAILED" | "ROLLBACK" | "REFUNDED";
        /** TransactionSummary */
        TransactionSummary: {
            /** Month */
            month?: string;
            /** Total Income */
            total_income?: number;
            /** Total Expense */
            total_expense?: number;
            /** Total Balance */
            total_balance?: number;
            /** Income Transaction Count */
            income_transaction_count?: number;
            /** Expense Transaction Count */
            expense_transaction_count?: number;
            /** Daily Transactions */
            daily_transactions?: {
                [key: string]: components["schemas"]["TransactionList"];
            };
        };
        /** TransactionsPublic */
        TransactionsPublic: {
            /** Data */
            data: components["schemas"]["TransactionInternal"][];
            /** Count */
            count: number;
        };
        /** UpdateExtraOptionRequest */
        UpdateExtraOptionRequest: {
            extra_option?: components["schemas"]["ExtraOption"];
            /** Extra Option Id */
            extra_option_id?: string;
        };
        /** UpdateExtraOptionResponse */
        UpdateExtraOptionResponse: {
            extra_option?: components["schemas"]["ExtraOption"];
            /** Error */
            error?: string;
        };
        /** UpdatePassword */
        UpdatePassword: {
            /** Current Password */
            current_password: string;
            /** New Password */
            new_password: string;
        };
        /** UpdatePriceDurationRequest */
        UpdatePriceDurationRequest: {
            duration?: components["schemas"]["Interval"];
            /** Price Template Id */
            price_template_id?: string;
        };
        /** UpdatePriceDurationResponse */
        UpdatePriceDurationResponse: {
            /** Durations */
            durations?: components["schemas"]["Interval"][];
            /** Price Template Id */
            price_template_id?: string;
            /** Error */
            error?: string;
        };
        /** UpdatePriceSeasonRequest */
        UpdatePriceSeasonRequest: {
            season?: components["schemas"]["SeasonPrice"];
            /** Price Template Id */
            price_template_id?: string;
            /** Multiplier */
            multiplier?: number;
        };
        /** UpdatePriceSeasonResponse */
        UpdatePriceSeasonResponse: {
            season?: components["schemas"]["SeasonPrice"];
            /** Price Template Id */
            price_template_id?: string;
            /** Error */
            error?: string;
        };
        /** UpdatePriceTemplateRequest */
        UpdatePriceTemplateRequest: {
            /** Price Template Id */
            price_template_id?: string;
            price_template?: components["schemas"]["PriceTemplate-Input"];
        };
        /** UpdatePriceTemplateResponse */
        UpdatePriceTemplateResponse: {
            /** Price Template Id */
            price_template_id?: string;
            price_template?: components["schemas"]["PriceTemplate-Output"];
            /** Error */
            error?: string;
        };
        /**
         * UpdateRiderProfileRequest
         * @description Schema for updating rider profile.
         */
        UpdateRiderProfileRequest: {
            /**
             * Full Name
             * @description Full name
             */
            full_name?: string | null;
            /**
             * Phone
             * @description Phone number
             */
            phone?: string | null;
            /**
             * Avatar
             * @description Profile photo URL
             */
            avatar?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Location
             * @description Location
             */
            location?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
        };
        /** UpdateVehicleRequest */
        UpdateVehicleRequest: {
            /** Vehicle Id */
            vehicle_id?: string;
            vehicle?: components["schemas"]["Vehicle-Input"];
        };
        /** UpdateVehicleResponse */
        UpdateVehicleResponse: {
            /** Vehicle Id */
            vehicle_id?: string;
            vehicle?: components["schemas"]["Vehicle-Output"];
            /** Error */
            error?: string;
        };
        /**
         * UserActivity
         * @description Model for a single user activity event.
         */
        UserActivity: {
            /** Timestamp */
            timestamp: string;
            /** Activity Type */
            activity_type: string;
            /** Details */
            details: {
                [key: string]: unknown;
            };
        };
        /** UserAdmin */
        UserAdmin: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean;
            /**
             * Is Beta Tester
             * @description User is in beta testing program
             * @default false
             */
            is_beta_tester: boolean;
            /** Full Name */
            full_name?: string | null;
            /** @default OWNER */
            role: components["schemas"]["RoleEnum"];
            /** @default USD */
            currency: components["schemas"]["CurrencyEnum"] | null;
            /** @default EN */
            language: components["schemas"]["LanguageEnum"] | null;
            /** Location */
            location?: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Rent Service Name */
            rent_service_name?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Business Name
             * @description Business name for owners
             */
            business_name?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            address?: components["schemas"]["AddressPublic"] | null;
            /** Last Login At */
            last_login_at?: string | null;
            /**
             * Login Count
             * @default 0
             */
            login_count: number;
        };
        /**
         * UserBlockMetrics
         * @description User metrics for admin dashboard.
         */
        UserBlockMetrics: {
            /**
             * Total
             * @default 0
             */
            total: number;
            /**
             * Online Last 30 Days
             * @default 0
             */
            online_last_30_days: number;
            /**
             * Internal
             * @default 0
             */
            internal: number;
            /**
             * External
             * @default 0
             */
            external: number;
            /**
             * Owners
             * @default 0
             */
            owners: number;
            /**
             * Riders
             * @default 0
             */
            riders: number;
            /**
             * Logins
             * @default 0
             */
            logins: number;
        };
        /** UserCreate */
        UserCreate: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean;
            /**
             * Is Beta Tester
             * @description User is in beta testing program
             * @default false
             */
            is_beta_tester: boolean;
            /** Full Name */
            full_name?: string | null;
            /** @default OWNER */
            role: components["schemas"]["RoleEnum"];
            /** @default USD */
            currency: components["schemas"]["CurrencyEnum"] | null;
            /** @default EN */
            language: components["schemas"]["LanguageEnum"] | null;
            /** Location */
            location?: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Rent Service Name */
            rent_service_name?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Business Name
             * @description Business name for owners
             */
            business_name?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            /** Password */
            password: string;
        };
        /** UserEmailValidate */
        UserEmailValidate: {
            /** Email */
            email?: string;
            /** Code */
            code?: string;
        };
        /**
         * UserMetrics
         * @description Detailed metrics for a specific user.
         */
        UserMetrics: {
            /**
             * Total Vehicles
             * @default 0
             */
            total_vehicles: number;
            /**
             * Draft Vehicles
             * @default 0
             */
            draft_vehicles: number;
            /**
             * Published Vehicles
             * @default 0
             */
            published_vehicles: number;
            /**
             * Archived Vehicles
             * @default 0
             */
            archived_vehicles: number;
            /**
             * Total Reservations
             * @default 0
             */
            total_reservations: number;
            /**
             * Pending Reservations
             * @default 0
             */
            pending_reservations: number;
            /**
             * Confirmed Reservations
             * @default 0
             */
            confirmed_reservations: number;
            /**
             * Completed Reservations
             * @default 0
             */
            completed_reservations: number;
            /**
             * Cancelled Reservations
             * @default 0
             */
            cancelled_reservations: number;
            /**
             * Wallet Balance
             * @default 0
             */
            wallet_balance: number;
            /**
             * Wallet Currency
             * @default EUR
             */
            wallet_currency: string;
            /**
             * Total Spent
             * @default 0
             */
            total_spent: number;
            /**
             * Total Earned
             * @default 0
             */
            total_earned: number;
            /**
             * Account Age Days
             * @default 0
             */
            account_age_days: number;
            /** Days Since Last Login */
            days_since_last_login?: number | null;
            /**
             * Login Count
             * @default 0
             */
            login_count: number;
        };
        /** UserPublic */
        UserPublic: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean;
            /**
             * Is Beta Tester
             * @description User is in beta testing program
             * @default false
             */
            is_beta_tester: boolean;
            /** Full Name */
            full_name?: string | null;
            /** @default OWNER */
            role: components["schemas"]["RoleEnum"];
            /** @default USD */
            currency: components["schemas"]["CurrencyEnum"] | null;
            /** @default EN */
            language: components["schemas"]["LanguageEnum"] | null;
            /** Location */
            location?: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Rent Service Name */
            rent_service_name?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Business Name
             * @description Business name for owners
             */
            business_name?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            address?: components["schemas"]["AddressPublic"] | null;
        };
        /** UserRegister */
        UserRegister: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
            /** Full Name */
            full_name?: string | null;
            /** @default OWNER */
            role: components["schemas"]["RoleEnum"];
        };
        /** UserUpdate */
        UserUpdate: {
            /** Email */
            email?: string | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean;
            /**
             * Is Beta Tester
             * @description User is in beta testing program
             * @default false
             */
            is_beta_tester: boolean;
            /** Full Name */
            full_name?: string | null;
            /** @default OWNER */
            role: components["schemas"]["RoleEnum"];
            /** @default USD */
            currency: components["schemas"]["CurrencyEnum"] | null;
            /** @default EN */
            language: components["schemas"]["LanguageEnum"] | null;
            /** Location */
            location?: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Rent Service Name */
            rent_service_name?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Business Name
             * @description Business name for owners
             */
            business_name?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            /** Password */
            password?: string | null;
        };
        /** UserUpdateMe */
        UserUpdateMe: {
            /** Full Name */
            full_name?: string | null;
            /** @default USD */
            currency: components["schemas"]["CurrencyEnum"] | null;
            /** @default EN */
            language: components["schemas"]["LanguageEnum"] | null;
            /** Location */
            location?: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Rent Service Name */
            rent_service_name?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Business Name
             * @description Business name for owners
             */
            business_name?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            address?: components["schemas"]["AddressUpdate"] | null;
        };
        /** UserWithToken */
        UserWithToken: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Superuser
             * @default false
             */
            is_superuser: boolean;
            /**
             * Is Beta Tester
             * @description User is in beta testing program
             * @default false
             */
            is_beta_tester: boolean;
            /** Full Name */
            full_name?: string | null;
            /** @default OWNER */
            role: components["schemas"]["RoleEnum"];
            /** @default USD */
            currency: components["schemas"]["CurrencyEnum"] | null;
            /** @default EN */
            language: components["schemas"]["LanguageEnum"] | null;
            /** Location */
            location?: string | null;
            /** Avatar */
            avatar?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Rent Service Name */
            rent_service_name?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Business Name
             * @description Business name for owners
             */
            business_name?: string | null;
            /**
             * Bio
             * @description Profile biography
             */
            bio?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            address?: components["schemas"]["AddressPublic"] | null;
            token?: components["schemas"]["Token"] | null;
        };
        /** UsersAdmin */
        UsersAdmin: {
            /** Data */
            data: components["schemas"]["UserAdmin"][];
            /** Count */
            count: number;
        };
        /** UsersPublic */
        UsersPublic: {
            /** Data */
            data: components["schemas"]["UserPublic"][];
            /** Count */
            count: number;
        };
        /** ValidateReservationRequest */
        ValidateReservationRequest: {
            /** Vehicle Id */
            vehicle_id?: string;
            /**
             * Date From
             * Format: date-time
             */
            date_from?: string;
            /**
             * Date To
             * Format: date-time
             */
            date_to?: string;
            selected_extra_options?: components["schemas"]["SelectedExtraOptions"];
            /** Currency */
            currency?: string;
        };
        /** ValidateReservationResponse */
        ValidateReservationResponse: {
            /** Is Valid */
            is_valid?: boolean;
            /** Error */
            error?: string;
            /** Prices */
            prices?: {
                [key: string]: number;
            };
            /** Price By Days */
            price_by_days?: components["schemas"]["PriceDayDetail"][];
            /** Price Template Name */
            price_template_name?: string;
            commission?: components["schemas"]["ReservationCommission"];
            /** Selected Extra Options */
            selected_extra_options?: components["schemas"]["SelectedExtraOptionItem"][];
            /** Available Hours */
            available_hours?: components["schemas"]["AvailableHour"][];
            /** Currency */
            currency?: string;
            /** Base Currency */
            base_currency?: string;
            /** Conversion Rate */
            conversion_rate?: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** Vehicle */
        "Vehicle-Input": {
            /** Id */
            id?: string;
            /** Owner Id */
            owner_id?: string;
            type?: components["schemas"]["VehicleType"];
            sub_type?: components["schemas"]["VehicleSubType"];
            /** Name */
            name?: string;
            status?: components["schemas"]["VehicleStatus"];
            picture?: components["schemas"]["Picture"];
            general_info?: components["schemas"]["GeneralInfo"];
            specification_info?: components["schemas"]["SpecificationInfo"];
            additional_info?: components["schemas"]["AdditionalInfo"];
            price_templates?: components["schemas"]["ExtraDetails"];
            /** Is Reserved */
            is_reserved?: boolean;
            /** Price */
            price?: number;
            /** Price Template Id */
            price_template_id?: string;
            /** Extra Option Ids */
            extra_option_ids?: string[];
            /** Extra Options Details */
            extra_options_details?: components["schemas"]["ExtraOption"][];
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
            /** Price Conversions */
            price_conversions?: {
                [key: string]: components["schemas"]["PriceConversion"];
            };
            /** Currency */
            currency?: string;
        };
        /** Vehicle */
        "Vehicle-Output": {
            /** Id */
            id?: string;
            /** Owner Id */
            owner_id?: string;
            type?: components["schemas"]["VehicleType"];
            sub_type?: components["schemas"]["VehicleSubType"];
            /** Name */
            name?: string;
            status?: components["schemas"]["VehicleStatus"];
            picture?: components["schemas"]["Picture"];
            general_info?: components["schemas"]["GeneralInfo"];
            specification_info?: components["schemas"]["SpecificationInfo"];
            additional_info?: components["schemas"]["AdditionalInfo"];
            price_templates?: components["schemas"]["ExtraDetails"];
            /** Is Reserved */
            is_reserved?: boolean;
            /** Price */
            price?: number;
            /** Price Template Id */
            price_template_id?: string;
            /** Extra Option Ids */
            extra_option_ids?: string[];
            /** Extra Options Details */
            extra_options_details?: components["schemas"]["ExtraOption"][];
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
            /** Price Conversions */
            price_conversions?: {
                [key: string]: components["schemas"]["PriceConversion"];
            };
            /** Currency */
            currency?: string;
        };
        /**
         * VehicleActivity
         * @description Model for a single vehicle activity event.
         */
        VehicleActivity: {
            /** Timestamp */
            timestamp: string;
            /** Activity Type */
            activity_type: string;
            /** Details */
            details: {
                [key: string]: unknown;
            };
        };
        /**
         * VehicleAvailabilityRequest
         * @description Schema for checking vehicle availability.
         */
        VehicleAvailabilityRequest: {
            /**
             * Date From
             * Format: date-time
             * @description Rental start date
             */
            date_from: string;
            /**
             * Date To
             * Format: date-time
             * @description Rental end date
             */
            date_to: string;
        };
        /**
         * VehicleAvailabilityResponse
         * @description Schema for vehicle availability response.
         */
        VehicleAvailabilityResponse: {
            /**
             * Is Available
             * @description Whether vehicle is available
             */
            is_available: boolean;
            /**
             * Conflicting Reservations
             * @description List of conflicting reservation IDs
             */
            conflicting_reservations?: string[];
            /**
             * Alternative Dates
             * @description Suggested alternative date ranges
             */
            alternative_dates?: {
                [key: string]: string;
            }[];
            /**
             * Message
             * @description Additional information
             */
            message?: string | null;
        };
        /**
         * VehicleBlockMetrics
         * @description Vehicle metrics for admin dashboard - Plan Compliant.
         */
        VehicleBlockMetrics: {
            /**
             * Total
             * @default 0
             */
            total: number;
            /**
             * Draft
             * @default 0
             */
            draft: number;
            /**
             * Free
             * @default 0
             */
            free: number;
            /**
             * Collected
             * @default 0
             */
            collected: number;
            /**
             * Maintenance
             * @default 0
             */
            maintenance: number;
            /**
             * Archived
             * @default 0
             */
            archived: number;
        };
        /**
         * VehicleDetailsResponse
         * @description Schema for detailed vehicle information.
         */
        VehicleDetailsResponse: {
            /** @description Vehicle details */
            vehicle: components["schemas"]["Vehicle-Output"];
            /**
             * Owner
             * @description Owner information (filtered)
             */
            owner?: {
                [key: string]: unknown;
            };
            /**
             * Availability Calendar
             * @description Availability calendar for next 30 days
             */
            availability_calendar?: {
                [key: string]: unknown;
            }[];
            /**
             * Pricing Info
             * @description Pricing information
             */
            pricing_info?: {
                [key: string]: unknown;
            };
            /**
             * Pickup Locations
             * @description Available pickup locations
             */
            pickup_locations?: {
                [key: string]: unknown;
            }[];
        };
        /**
         * VehicleStatus
         * @description Specifies vehicle status (free, collected, archived, etc.)
         * @enum {integer}
         */
        VehicleStatus: 0 | 1 | 2 | 3 | 4 | 5;
        /**
         * VehicleSubType
         * @description VehicleSubType specifies vehicle subtype (sedan, off-road, sport, etc.)
         * @enum {integer}
         */
        VehicleSubType: 0 | 1 | 2 | 3;
        /** VehicleTeaser */
        VehicleTeaser: {
            /** Name */
            name?: string;
            /** Reg Number */
            reg_number?: string;
            /** Cover */
            cover?: string;
        };
        /** VehicleTimeSlots */
        VehicleTimeSlots: {
            vehicle?: components["schemas"]["VehicleTeaser"];
            /** Time Slots */
            time_slots?: components["schemas"]["TimeSlot"][];
        };
        /**
         * VehicleType
         * @description VehicleType specifies vehicle type (car, bike, scooter, etc.)
         * @enum {integer}
         */
        VehicleType: 0 | 1 | 2 | 3;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "Auth-auth_access_token": {
        parameters: {
            query?: {
                user_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_Auth-auth_access_token"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Auth-test_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Auth-refresh_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Auth-recover_password": {
        parameters: {
            query?: {
                user_type?: string;
            };
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Auth-reset_password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewPassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Auth-recover_password_html_content": {
        parameters: {
            query?: {
                user_type?: string;
            };
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Auth-send_code": {
        parameters: {
            query?: {
                user_type?: string;
            };
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Auth-verify_code": {
        parameters: {
            query?: {
                user_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserEmailValidate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Account-account_deletion_request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Account-get_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetConfigResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Garage-list_vehicles": {
        parameters: {
            query?: {
                status?: string | null;
                size?: number;
                page_token?: string | null;
                query?: string | null;
                date_from?: string | null;
                date_to?: string | null;
                location?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListVehiclesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Garage-create_vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVehicleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateVehicleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Garage-get_vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicle_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetVehicleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Garage-update_vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicle_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateVehicleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVehicleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Garage-delete_vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicle_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Garage-copy_vehicle": {
        parameters: {
            query: {
                reg_number: string;
            };
            header?: never;
            path: {
                vehicle_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVehicleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Garage-publish_vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                vehicle_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetVehicleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Garage-archive_vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ArchiveVehicleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArchiveVehicleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Garage-delete_drafts_vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Garage-get_vehicle_status_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Extra Option-list_extra_options": {
        parameters: {
            query?: {
                /** @description Optional vehicle id to filter by */
                vehicle_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListExtraOptionsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Extra Option-create_extra_option": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateExtraOptionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateExtraOptionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Extra Option-get_extra_option": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                extra_option_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetExtraOptionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Extra Option-update_extra_option": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                extra_option_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateExtraOptionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateExtraOptionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Extra Option-delete_extra_option": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                extra_option_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Extra Option-copy_extra_option": {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path: {
                extra_option_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateExtraOptionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-search_vehicles": {
        parameters: {
            query?: {
                size?: number;
                page_token?: string | null;
                query?: string | null;
                date_from?: string | null;
                date_to?: string | null;
                location?: string | null;
            };
            header?: never;
            path: {
                owner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchVehiclesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-get_vehicle": {
        parameters: {
            query?: {
                /** @description Filter from this date (ISO format) */
                date_from?: string | null;
                /** @description Filter to this date (ISO format) */
                date_to?: string | null;
            };
            header?: never;
            path: {
                owner_id: string;
                vehicle_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VehicleDetailsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-check_vehicle_availability": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner_id: string;
                vehicle_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VehicleAvailabilityRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VehicleAvailabilityResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-calculate_pricing": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner_id: string;
                vehicle_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateReservationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-list_reservations": {
        parameters: {
            query?: {
                size?: number;
                page_token?: string | null;
                query?: string | null;
                date_from?: string | null;
                date_to?: string | null;
                location?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListReservationsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-create_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReservationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PendingReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-get_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-cancel_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-get_rider_profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiderProfileResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Rider-update_rider_profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRiderProfileRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiderProfileResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Rider-get_owner_public_profile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnerPublicProfile"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Template-list_price_templates": {
        parameters: {
            query?: {
                page_token?: string | null;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListPriceTemplatesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Template-create_price_template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePriceTemplateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatePriceTemplateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Template-get_price_template": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPriceTemplateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Template-update_price_template": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePriceTemplateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatePriceTemplateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Template-delete_price_template": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Template-multiply_price_template": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MultiplyPriceTemplateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MultiplyPriceTemplateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Template-clone_price_template": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPriceTemplateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Template-apply_vehicles": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplyVehiclesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplyVehiclesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Duration-create_price_duration": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePriceDurationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatePriceDurationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Duration-update_price_duration": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
                price_duration_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePriceDurationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatePriceDurationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Duration-delete_price_duration": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
                price_duration_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Season-list_price_season": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListPriceSeasonsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Season-create_price_season": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePriceSeasonRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatePriceSeasonResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Season-update_price_season": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
                price_season_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePriceSeasonRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatePriceSeasonResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Season-delete_price_season": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
                price_season_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeletePriceSeasonResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Price Season-multiply_price_season": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                price_template_id: string;
                price_season_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MultiplyPriceSeasonRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MultiplyPriceSeasonResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Time Slot-list_time_slots": {
        parameters: {
            query?: {
                vehicle_id?: string | null;
                page_token?: string | null;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListTimeSlotsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Time Slot-list_time_slots_by_vehicle": {
        parameters: {
            query?: {
                size?: number;
                page_token?: string | null;
                query?: string | null;
                date_from?: string | null;
                date_to?: string | null;
                location?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListTimeSlotsByVehicleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-validate_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateReservationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-prices_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateReservationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-pending_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReservationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PendingReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-confirm_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReservationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-reservation_conflict_groups": {
        parameters: {
            query: {
                date_from: string;
                date_to: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConflictReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-get_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-update_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReservationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-get_reservation_prices": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-list_reservations": {
        parameters: {
            query?: {
                vehicle_id?: string | null;
                status?: string | null;
                today?: boolean;
                tomorrow?: boolean;
                size?: number;
                page_token?: string | null;
                query?: string | null;
                date_from?: string | null;
                date_to?: string | null;
                location?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListReservationsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-history_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-confirmation_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmationReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-cancel_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelReservationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-collect_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReservationCollect"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-complete_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReservationComplete"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Reservation-overdue_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmReservationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmReservationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Finance-get_balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BalanceResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Finance-top_up_balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TopUpRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopUpResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Finance-list_transaction": {
        parameters: {
            query?: {
                page_token?: string | null;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListTransactionsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Finance-create_external_transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTransactionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTransactionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Finance-list_transactions_monthly": {
        parameters: {
            query?: {
                /** @description Optional month to filter by */
                month?: number | null;
                /** @description Optional wallet to filter by */
                wallet?: string | null;
                page_token?: string | null;
                size?: number;
            };
            header?: never;
            path: {
                year: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionSummary"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Finance-list_transactions_external_monthly": {
        parameters: {
            query?: {
                /** @description Optional month to filter by */
                month?: number | null;
                page_token?: string | null;
                size?: number;
            };
            header?: never;
            path: {
                year: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionSummary"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Finance-list_transactions_internal_monthly": {
        parameters: {
            query?: {
                /** @description Optional month to filter by */
                month?: number | null;
                page_token?: string | null;
                size?: number;
            };
            header?: never;
            path: {
                year: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionSummary"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Storage-unzip_entity_photo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doc_index: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_Storage-unzip_entity_photo"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Storage-create_entity_photos": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doc_index: string;
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_Storage-create_entity_photos"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileMetadata"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Storage-update_entity_cover": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doc_index: string;
                entity_id: string;
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileMetadata"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Storage-delete_entity_photo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doc_index: string;
                entity_id: string;
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-read_users": {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersPublic"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-create_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-read_user_me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "User-delete_user_me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "User-update_user_me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateMe"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-update_password_me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-register_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRegister"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithToken"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-register_rider_user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RiderUserRegister"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiderUserWithToken"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-read_user_by_id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-delete_user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-update_user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "User-get_user_transactions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionsPublic"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Utils-test_email": {
        parameters: {
            query: {
                email_to: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Utils-health_check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Utils-colors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Utils-car_make": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Utils-get_currencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    }[];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Utils-list_currencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCurrencyRatesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Utils-get_languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Admin-get_block_metrics": {
        parameters: {
            query?: {
                /** @description Filter from this date (ISO format) */
                date_start?: string | null;
                /** @description Filter to this date (ISO format) */
                date_end?: string | null;
                /** @description Filter users by role: OWNER, RIDER */
                role?: components["schemas"]["RoleEnum"] | null;
                /** @description Filter users by status: active, inactive */
                user_status?: string | null;
                /** @description Filter vehicles by status */
                vehicle_status?: string | null;
                /** @description Filter reservations by status */
                reservation_status?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminDashboardMetrics"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-get_admin_users": {
        parameters: {
            query?: {
                /** @description Number of users to skip */
                skip?: number;
                /** @description Number of users to return */
                limit?: number;
                /** @description Filter by user type */
                user_type?: components["schemas"]["RoleEnum"] | null;
                /** @description Filter users registered after this date */
                registration_from?: string | null;
                /** @description Filter users registered before this date */
                registration_to?: string | null;
                /** @description Filter users inactive for X days */
                inactive_days?: number | null;
                /** @description Search by email or name */
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersAdmin"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-get_system_info_endpoint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
        };
    };
    "Admin-get_recent_errors": {
        parameters: {
            query?: {
                /** @description Number of recent errors to return */
                _limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    }[];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-get_recent_user_activities": {
        parameters: {
            query?: {
                /** @description Number of activities to skip */
                skip?: number;
                /** @description Number of activities to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedActivityResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-get_recent_vehicle_activities": {
        parameters: {
            query?: {
                /** @description Number of activities to skip */
                skip?: number;
                /** @description Number of activities to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedActivityResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-get_recent_reservation_activities": {
        parameters: {
            query?: {
                /** @description Number of activities to skip */
                skip?: number;
                /** @description Number of activities to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedActivityResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-get_recent_activity": {
        parameters: {
            query?: {
                /** @description Filter activities for specific user */
                user_id?: string | null;
                /** @description Number of recent activities to return per block */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecentActivity"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-get_user_metrics": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMetrics"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-get_admin_riders": {
        parameters: {
            query?: {
                /** @description Number of riders to skip */
                skip?: number;
                /** @description Number of riders to return */
                limit?: number;
                /** @description Filter riders registered after this date */
                registration_from?: string | null;
                /** @description Filter riders registered before this date */
                registration_to?: string | null;
                /** @description Filter riders inactive for X days */
                inactive_days?: number | null;
                /** @description Search by email or name */
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiderUsersAdmin"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-get_admin_rider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiderUserAdmin"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-delete_admin_rider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Admin-update_admin_rider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RiderUserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RiderUserAdmin"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseValidationError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "Utils-get_metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
